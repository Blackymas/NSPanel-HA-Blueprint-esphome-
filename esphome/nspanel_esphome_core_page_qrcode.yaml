#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - QRCODE                                                                     #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_QRCODE: '1UL << 22'
  PAGE_ID_QRCODE: '17'
  qrcode_size: '200'
  qrcode_background_color: '65535'
  qrcode_foreground_color: '0'
  qrcode_logo_pic: '-1'
  qrcode_border_width: '8'

api:
  id: !extend api_server
  actions:
    # Dynamically displays QR codes on the ESPHome UI for sharing information such as WiFi passwords or website links.
    - action: qrcode
      variables:
        title: string   # Heading or title for the QR code, offering context or instructions.
        qrcode: string  # Data or URL to be encoded into the QR code.
        show: bool      # Flag to immediately display the QR code page upon action invocation.
      then:
        - lambda: |-
            id(qrcode_string) = qrcode;
            disp1->set_component_text("qrcode.qrcode_label", title.c_str());
            if (show)
              goto_page_id->execute(${PAGE_ID_QRCODE}, true);
            if (!complete_boot_step(${BOOT_STEP_PAGE_QRCODE}))
              boot_progress->execute(${BOOT_STEP_PAGE_QRCODE}, "Page QRcode - Action");

globals:
  - id: qrcode_enabled
    type: bool
    restore_value: false
    initial_value: 'false'

  - id: qrcode_string
    type: std::string
    restore_value: false
    max_restore_data_length: 100
    initial_value: '""'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_QRCODE}, "Page QRcode");

  - id: !extend page_changed
    then:
      - lambda: |-
          if (id(current_page_id) == ${PAGE_ID_QRCODE})
            page_qrcode->execute();

  - id: !extend page_home
    then:
      - lambda: |-
          set_component_visibility->execute("home", "bt_qrcode", id(qrcode_enabled));

  # Load the QRCode page
  - id: page_qrcode
    mode: restart
    then:
      - lambda: |-
          if (!id(qrcode_string).empty())
            // qrcode (uint16_t x1, uint16_t y1, const char *content, uint16_t size=200, uint16_t background_color=65535, uint16_t foreground_color=0, uint8_t logo_pic=-1, uint8_t border_width=8)
            disp1->qrcode(((id(display_mode) == 2 ? 320 : 480)-200)/2,  // x1
                          ((id(display_mode) == 2 ? 480 : 320)-200)/2,  // y1
                          id(qrcode_string).c_str(),                    // content
                          ${qrcode_size},                               // size
                          ${qrcode_background_color},                   // background_color
                          ${qrcode_foreground_color},                   // foreground_color
                          ${qrcode_logo_pic},                           // logo pic id
                          ${qrcode_border_width}                        // border_width
                        );

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "qrcode_enabled") {
            id(qrcode_enabled) = val;
            set_component_visibility->execute("home", "bt_qrcode", id(qrcode_enabled));
            if (!val) boot_progress->execute(${BOOT_STEP_PAGE_QRCODE}, "Page QRcode - Enabler");
          }

  - id: !extend stop_all
    then:
      - script.stop: page_qrcode
...
