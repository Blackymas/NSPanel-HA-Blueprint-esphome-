#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - DATE & TIME                                                                #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_DATETIME: '1UL << 2'

esphome:
  on_boot:
    - priority: 600.2
      then:
        - lambda: |-
            set_timezone->execute(id(mui_timezone).c_str());

globals:
  - id: mui_timezone
    type: std::string
    restore_value: true
    initial_value: '""'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_DATETIME}, "Date & Time");

  - id: !extend dump_config
    then:
      - lambda: |-
          ESP_LOGCONFIG("${project_tag}", "Date & Time:");
          ESP_LOGCONFIG("${project_tag}", " - Time format: %s", id(mui_time_format).c_str());
          ESP_LOGCONFIG("${project_tag}", " - Timezone:    %s", id(mui_timezone).c_str());

  - id: !extend page_home
    then:
      - script.execute: refresh_datetime

  - id: refresh_datetime
    mode: restart
    then:  # There's nothing here so far
      # Extended by:
      #   - nspanel_esphome_core_page_home.yaml
      #   - nspanel_esphome_core_page_screensaver.yaml

  - id: !extend set_component_font_color  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (page == "home") {
            if (component == "date") id(home_date_color) = color;
            else if (component == "time") id(home_time_color) = color;
          }

  - id: set_timezone
    mode: restart
    parameters:
      timezone: string
    then:
      - lambda: |-
          ESP_LOGI("script.set_timezone", "Setting timezone: %s", timezone.c_str());
      - if:
          condition:
            - lambda: return (timezone != id(mui_timezone));
          then:
            - lambda: |-
                id(mui_timezone) = timezone;
                if (timezone.empty())
                  arch_restart();  // Restart when timezone is set to blank so it uses the one from ESPHome compiller
                  time_provider->set_timezone(timezone.c_str());
                  time_provider->call_setup();
                  time_provider->dump_config();
                refresh_datetime->execute();

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "timezone") set_timezone->execute(val.c_str());
          else if (component == "mui_meridiem_am") id(mui_meridiem_am) = val;
          else if (component == "mui_meridiem_pm") id(mui_meridiem_pm) = val;
          else if (component == "time_format") {
            id(mui_time_format) = val;
            boot_progress->execute(${BOOT_STEP_DATETIME}, "Date & Time");
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          refresh_datetime->stop();
          set_timezone->stop();

##### Keeps time display updated #####
time:
  - id: time_provider
    platform: homeassistant
    on_time:
      - seconds: 0  # Every minute, at second 0
        then:
          - script.execute: refresh_datetime
          - script.execute: refresh_wifi_icon

      - seconds: 30  # Watchdog - Every minute, at second 30
        then:
          - lambda: |-
              if (not wifi_component->is_connected()) {
                ESP_LOGW("time_provider.on_time", "Retrying Wi-Fi connection");
                wifi_component->retry_connect();
              }
              if (
                !api_server->is_connected() and
                current_page->state != "blank" and
                current_page->state != "boot" and
                current_page->state != "confirm" and
                current_page->state != "home" and
                current_page->state != "qrcode" and
                current_page->state != "screensaver" and
                current_page->state != "settings"
                ) {
                ESP_LOGW("time_provider.on_time", "API disconnected. Falling back to Home page.");
                goto_page->execute("home", false);
                reset_boot_steps();
              }
              refresh_wifi_icon->execute();

      - minutes: /10
        seconds: 5
        then:
          - script.execute: dump_config

    on_time_sync:
      then:
        - lambda: |-
            refresh_datetime->execute();
            ESP_LOGI("time.on_time_sync", "System clock synchronized");
            ESP_LOGI("time.on_time_sync", "Timezone: %s", time_provider->get_timezone().c_str());
...
