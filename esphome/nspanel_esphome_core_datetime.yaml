#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - DATE & TIME                                                                #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_DATETIME: '1UL << 2'

esphome:
  on_boot:
    - priority: 600.2
      then:
        - lambda: |-
            if (not id(mui_timezone).empty())
              set_timezone->execute(id(mui_timezone).c_str());

globals:
  - id: mui_timezone
    type: std::string
    restore_value: true
    initial_value: '""'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_DATETIME}, "Date & Time");

  - id: !extend dump_config
    then:
      - lambda: |-
          ESP_LOGCONFIG("${project_tag}", "Date & Time:");
          ESP_LOGCONFIG("${project_tag}", " Time format:         %s", id(mui_time_format).c_str());
          if (not id(mui_timezone).empty())
            ESP_LOGCONFIG("${project_tag}", " Timezone (selected): %s", id(mui_timezone).c_str());
          ESP_LOGCONFIG("${project_tag}", " Timezone (current):  %s", time_provider->get_timezone().c_str());

  - id: !extend page_home
    then:
      - script.execute: refresh_datetime

  - id: refresh_datetime
    mode: restart
<<<<<<< Updated upstream
    then:
=======
    then:  # There's nothing here so far
>>>>>>> Stashed changes
    # Extended by:
    #   - nspanel_esphome_core_page_home.yaml
    #   - nspanel_esphome_core_page_screensaver.yaml

  - id: !extend set_component_font_color  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (page == "home") {
            if (component == "date") id(home_date_color) = color;
            else if (component == "time") id(home_time_color) = color;
          }

  - id: set_timezone
    mode: restart
    parameters:
      timezone: string
    then:
      - lambda: |-
          ESP_LOGI("script.set_timezone", "Setting timezone: %s", timezone.c_str());
          if (timezone != id(mui_timezone)) {
            id(mui_timezone) = timezone;
            size_t start = id(mui_timezone).find('<');
            size_t end = id(mui_timezone).find('>');
            if (start != std::string::npos && end != std::string::npos && end > start)
              id(mui_timezone).replace(start, (end - start) + 1, "UTC");
            time_provider->set_timezone(id(mui_timezone).c_str());
            time_provider->call_setup();
            if (timezone.empty())
              set_timezone_restart_esp->execute();
          }
          if (id(time_provider).now().is_valid()) {
              auto time = id(time_provider).now();
              ESP_LOGI("script.set_timezone", "Current Time: %02d:%02d:%02d", time.hour, time.minute, time.second);
              ESP_LOGI("script.set_timezone", "Time zone:    %s", id(time_provider).get_timezone().c_str());
          } else {
              ESP_LOGW("script.set_timezone", "Time is not available yet.");
          }
          time_provider->dump_config();
          refresh_datetime->execute();

  - id: set_timezone_restart_esp
    mode: restart
    then:
      - delay: 10s
      - lambda: arch_restart();  // Restart when timezone is set to blank so it uses the one from ESPHome compiller

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "timezone") set_timezone->execute(val.c_str());
          else if (component == "mui_meridiem_am") id(mui_meridiem_am) = val;
          else if (component == "mui_meridiem_pm") id(mui_meridiem_pm) = val;
          else if (component == "time_format") {
            id(mui_time_format) = val;
            boot_progress->execute(${BOOT_STEP_DATETIME}, "Date & Time");
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          refresh_datetime->stop();
          set_timezone->stop();
          set_timezone_restart_esp->stop();

##### Keeps time display updated #####
time:
  - id: time_provider
    platform: homeassistant
    on_time:
      - seconds: 0  # Every minute, at second 0
        then:
          - script.execute: refresh_datetime
          - script.execute: refresh_wifi_icon

    on_time_sync:
      then:
        - lambda: |-
            refresh_datetime->execute();
            ESP_LOGI("time.on_time_sync", "System clock synchronized");
            ESP_LOGI("time.on_time_sync", "Timezone: %s", time_provider->get_timezone().c_str());
...
