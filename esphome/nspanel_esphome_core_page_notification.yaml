#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - PAGE - NOTIFICATION                                                        #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_NOTIFICATION: '1UL << 21'
  PAGE_ID_NOTIFICATION: '16'

api:
  id: !extend api_server
  actions:
    # This action removes any displayed notifications from the screen,
    # helping to keep the user interface clean and focused on its primary functions.
    - action: notification_clear
      then:
        - lambda: |-
            if (current_page_id == ${PAGE_ID_NOTIFICATION})
              goto_page_id->execute(${PAGE_ID_HOME}, false);
            notification_label->publish_state("");
            notification_text->publish_state("");
            notification_unread->publish_state(false);
            set_component_visibility->execute(${PAGE_ID_HOME}, "bt_notific", false);

    # Displays a notification message on the screen, useful for alerts or informational updates.
    - action: notification_show
      variables:
        # Title or label for the notification, displayed in a prominent format.
        label: string
        # Detailed message or content of the notification. Include `\r` to insert a line break,
        # allowing for custom formatting.
        message: string
      then:
        - lambda: |-
            set_component_visibility->execute(${PAGE_ID_HOME}, "bt_notific", true);
            goto_page_id->execute(${PAGE_ID_NOTIFICATION}, true);
            set_component_text->execute(${PAGE_ID_NOTIFICATION}, "notifi_label", label.c_str());
            display_wrapped_text->execute(${PAGE_ID_NOTIFICATION}, "notifi_text01",
                                          message.c_str(), id(display_mode) == 2 ? 23 : 32);
            notification_label->publish_state(label.c_str());
            notification_text->publish_state(message.c_str());
            notification_unread->publish_state(true);
            if (notification_sound->state)
              buzzer->play("two short:d=4,o=5,b=100:16e6,16e6");

binary_sensor:
  - id: notification_unread
    name: Notification unread
    platform: template

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (page_id == ${PAGE_ID_NOTIFICATION}) {  // Page Notification
              switch (component_id) {
                case 7:  // bt_accept
                  ha_button->execute("notification", "bt_accept", touch_event ? "press" : "released");
                  if (!touch_event) {  // Release
                    notification_label->publish_state("");
                    notification_text->publish_state("");
                    notification_unread->publish_state(false);
                    goto_page_id->execute(${PAGE_ID_HOME}, false);
                    set_component_visibility->execute(${PAGE_ID_HOME}, "bt_notific", false);
                  }
                break;
                case 8:  // bt_clear
                  ha_button->execute("notification", "bt_clear", touch_event ? "press" : "released");
                  if (!touch_event) {  // Release
                    notification_unread->publish_state(false);
                    goto_page_id->execute(${PAGE_ID_HOME}, false);
                  }
                break;
              }
            }

esphome:
  on_boot:
    - priority: 600.3
      then:
        - lambda: |-
            notification_label->publish_state("");
            notification_text->publish_state("");
            notification_unread->publish_state(false);

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_NOTIFICATION}, "Page Notification");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_PAGE_NOTIFICATION}, "Page Notification");

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_ID_NOTIFICATION}) page_notification->execute();

  - id: page_notification
    mode: restart
    then:
      - lambda: |-
          set_component_text->execute(${PAGE_ID_NOTIFICATION}, "notifi_label", notification_label->state.c_str());
          display_wrapped_text->execute(${PAGE_ID_NOTIFICATION}, "notifi_text01",
                                        notification_text->state.c_str(), id(display_mode) == 2 ? 23 : 32);

  - id: !extend stop_all
    then:
      - lambda: |-
          page_notification->stop();

switch:
  - name: Notification sound  # Notification sound
    platform: template
    id: notification_sound
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - id: notification_label
    name: Notification Label
    platform: template
    on_value:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_label
              action: new_value

  - id: notification_text
    name: Notification Text
    platform: template
    on_value:
      then:
        - homeassistant.event:
            event: esphome.nspanel_ha_blueprint
            data:
              device_name: !lambda return device_name->state.c_str();
              esphome_version: ${version}
              type: notification_changed
              component: notification_text
              action: new_value
...
