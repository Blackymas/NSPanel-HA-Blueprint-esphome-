#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - MEDIA PLAYER                                                               #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_MEDIA_PLAYER: '1UL << 20'

api:
  id: !extend api_server
  actions:
    # Dynamically updates the media player page with current state and media information.
    - action: page_media_player
      variables:
        entity: string               # Entity ID of the media player, used for state updates and control.
        state: string                # Current playback state of the media player (e.g., "playing", "paused", "stopped").
        is_volume_muted: bool        # Indicates if the media volume is currently muted.
        friendly_name: string        # Display name of the media player, shown as the page title.
        volume_level: int            # Current volume level, typically expressed as a percentage.
        media_title: string          # Title of the currently playing media.
        media_artist: string         # Artist of the currently playing media.
        media_duration: float        # Total duration of the current media in seconds.
        media_position: float        # Current playback position in the media in seconds.
        media_position_delta: float  # Time elapsed since the last media position update in seconds.
        supported_features: int      # Bitmask indicating the media player's supported features (e.g., play, pause, volume control).
      then:
        - lambda: |-
            if (current_page->state == "media_player") {
              detailed_entity->publish_state(entity);
              disp1->set_component_text("page_label", friendly_name.c_str());
              display_wrapped_text->execute("media_player", "track", media_title.c_str(), id(display_mode) == 2 ? 16 : 27);
              display_wrapped_text->execute("media_player", "artist", media_artist.c_str(), id(display_mode) == 2 ? 26 : 40);

              // on/off button
              if (supported_features & 128 and state == "off") {  //TURN_ON
                disp1->set_component_foreground_color("bt_on_off", 65535);
                set_component_visibility->execute("media_player", "bt_on_off", true);
              } else if (supported_features & 256 and state != "off") {  //TURN_OFF
                disp1->set_component_foreground_color("bt_on_off", 10597);
                set_component_visibility->execute("media_player", "bt_on_off", true);
              } else
                set_component_visibility->execute("media_player", "bt_on_off", false);

              // play/pause button
              if ((supported_features & 512 or supported_features & 16384) and state != "playing" and state != "off") {  //PLAY_MEDIA+PLAY
                disp1->set_component_text("bt_play_pause", "\uE409"); // mdi:play
                set_component_visibility->execute("media_player", "bt_play_pause", true);
              } else if (supported_features & 1 and state == "playing" ) {  //PAUSE
                disp1->set_component_text("bt_play_pause", "\uE3E3"); // mdi:pause
                set_component_visibility->execute("media_player", "bt_play_pause", true);
              } else
                set_component_visibility->execute("media_player", "bt_play_pause", false);

              // bt_prev button - PREVIOUS_TRACK
              set_component_visibility->execute("media_player", "bt_prev", (supported_features & 16 and state != "off"));
              // bt_next button - NEXT_TRACK
              set_component_visibility->execute("media_player", "bt_next", (supported_features & 32 and state != "off"));

              // Stop button - STOP
              //set_component_visibility->execute("media_player", "bt_stop", (supported_features & 4096 and (state == "playing" or state == "paused")));

              // mute/unmute button - VOLUME_MUTE
              disp1->set_component_value("is_muted", is_volume_muted ? 1 : 0);
              if (supported_features & 8 and is_volume_muted) {  // unmute
                disp1->set_component_text("bt_mute", "\uEE07"); // mdi:volume-variant-off
                set_component_visibility->execute("media_player", "bt_mute", true);
              } else if (supported_features & 8) {  // mute
                disp1->set_component_text("bt_mute", "\uE57E"); // mdi:volume-low
                set_component_visibility->execute("media_player", "bt_mute", true);
              } else
                set_component_visibility->execute("media_player", "bt_mute", false);

              // VOLUME_SET
              if (supported_features & 4) {
                if (volume_level != id(last_volume_level)) {
                  id(last_volume_level) = volume_level;
                  disp1->set_component_text_printf("vol_text", "%" PRIu32 "%%", volume_level);
                  disp1->set_component_value("vol_slider", volume_level);
                }
                set_component_visibility->execute("media_player", "vol_slider", true);
                set_component_visibility->execute("media_player", "bt_vol_down", true);
                set_component_visibility->execute("media_player", "bt_vol_up", true);
                set_component_visibility->execute("media_player", "vol_text", true);
              } else {
                set_component_visibility->execute("media_player", "vol_slider", false);
                set_component_visibility->execute("media_player", "bt_vol_down", false);
                set_component_visibility->execute("media_player", "bt_vol_up", false);
                set_component_visibility->execute("media_player", "vol_text", false);
              }

              if (media_duration > 0) {
                if (media_duration != id(last_media_duration) or media_position != id(last_media_position)) {
                  id(last_media_duration) = media_duration;
                  id(last_media_position) = media_position;
                  disp1->set_component_value("prg_current", int(round(min(media_position + media_position_delta, media_duration))));
                }
                disp1->set_component_value("prg_total", int(round(media_duration)));
                disp1->send_command_printf("prg_timer.en=%i", (state == "playing") ? 1 : 0);
                set_component_visibility->execute("media_player", "time_current", true);
                set_component_visibility->execute("media_player", "time_total", true);
                set_component_visibility->execute("media_player", "time_progress", true);
              } else {
                disp1->send_command("prg_timer.en=0");
                set_component_visibility->execute("media_player", "time_current", false);
                set_component_visibility->execute("media_player", "time_total", false);
                set_component_visibility->execute("media_player", "time_progress", false);
              }
            }

globals:
  ###### Last volume level from Home Assistant ######
  - id: last_volume_level
    type: uint8_t
    restore_value: false
    initial_value: '0'
  ###### Last duration from Home Assistant ######
  - id: last_media_duration
    type: uint
    restore_value: false
    initial_value: '0'
  ###### Last duration from Home Assistant ######
  - id: last_media_position
    type: uint
    restore_value: false
    initial_value: '0'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_MEDIA_PLAYER}, "Page Media Player");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_PAGE_MEDIA_PLAYER}, "Page Media Player");

  - id: !extend event_from_display
    then:
      - lambda: |-
          if (page == "media_player") {
            const std::string key = json["key"];
            if (key == "volume_mute") {
              const std::string value = json["value"];
              ha_call_action->execute("media_player.volume_mute", "is_volume_muted", value.c_str(), detailed_entity->state.c_str());
            } else if (key == "volume_set") {
              const float value_float = json["value"].as<float>();
              ha_call_action->execute("media_player.volume_set", "volume_level", to_string(value_float / 100.0f), detailed_entity->state.c_str());
            } else if (!key.empty())
              ha_call_action->execute((std::string("media_player.") + key.c_str()), "", "", detailed_entity->state.c_str());
          }

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page->state == "media_player")
            page_media_player->execute();
          else {
            id(last_volume_level) = 0;
            id(last_media_duration) = 0;
            id(last_media_position) = 0;
          }

  - id: page_media_player
    mode: restart
    then:  # There's nothing here so far

  - id: !extend stop_all
    then:
      - script.stop: page_media_player
...
