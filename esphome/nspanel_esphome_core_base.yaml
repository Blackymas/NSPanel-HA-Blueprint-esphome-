#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - Base                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  device_name: nspanel
  name: ${device_name}
  friendly_name: ${device_name}
  ota_password: ${wifi_password}
  project_tag: nspanel_ha_blueprint
  ##############################
  BOOT_STEP_BASE: '1UL << 0'
  loop_time_threshold: 'UINT32_MAX'

api:
  id: !extend api_server

  on_client_connected:
    then:
      - lambda: |-
          boot_log->execute("API", (client_info + " connected (" + client_address + ")").c_str());
          if (client_info.find("Home Assistant ") == 0)
            id(api_is_updated) = true;
          else
            dump_config->execute();

  actions:
    - action: set_bool
      variables:
        component: string
        val: bool
      then:
        - script.execute:
            id: set_var_bool
            component: !lambda return component;
            val: !lambda return val;

    - action: set_number
      variables:
        component: string
        val: float
      then:
        - script.execute:
            id: set_var_number
            component: !lambda return component;
            val: !lambda return val;

    - action: set_string
      variables:
        component: string
        val: string
      then:
        - script.execute:
            id: set_var_string
            component: !lambda return component;
            val: !lambda return val;

button:
  - id: nspanel_factory_reset  # Factory Reset button - Used to clean values from flash
    name: Factory reset
    platform: factory_reset
    internal: false
    disabled_by_default: true
    icon: mdi:restart-alert

  - id: restart_nspanel  # Reboot ESP32
    name: Restart
    platform: restart

debug:

esp32:
  board: esp32dev
  flash_size: 4MB
  framework:
    type: esp-idf

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: NSPanel HA Blueprint
  min_version: 2024.8.0
  project:
    name: esphome.NSPanel_HA_Blueprint
  platformio_options:
    build_flags:
      - -Wno-missing-field-initializers
      - -D NSPANEL_HA_BLUEPRINT_CORE

external_components:
  - source:
      type: git
      url: https://github.com/Blackymas/NSPanel_HA_Blueprint
      ref: v${version}
    components:
      - nspanel_ha_blueprint
    refresh: 300s
  - source:
      type: git
      url: https://github.com/edwardtfn/esphome
      ref: debug-reset-reason-detailed
    refresh: 30s
    components:
      - debug

globals:
  - id: api_is_updated
    type: bool
    restore_value: false
    initial_value: 'false'

  - id: is_safe_mode
    type: bool
    restore_value: false
    initial_value: 'false'

  - id: max_loop_time
    type: uint32_t
    restore_value: true
    initial_value: '0'

logger:
  id: logger_std
  baud_rate: 0  # Disable serial logger to save some memory and CPU
  level: DEBUG
  logs:
    esp32.preferences: INFO
    esp-idf: INFO
    binary_sensor: INFO
    output: INFO
    script: INFO
    sensor: INFO
    switch: INFO
    text_sensor: INFO
    time: INFO

nspanel_ha_blueprint:  # Adds custom library for NSPanel HA Blueprint project

ota:
  - id: ota_std
    platform: esphome
    password: ${ota_password}
    on_state_change:
      then:
        - lambda: |-
            if (state == ota::OTA_STARTED)
              stop_all->execute();
            goto_page_id->execute(${PAGE_ID_BOOT}, true);
            if (state == ota::OTA_STARTED) {
              set_component_value->execute("boot", "progress", 0);
              boot_log->execute("OTA", "Started");
            } else if (state == ota::OTA_IN_PROGRESS) {
              disp1->send_command("progress.val+=10");
              boot_log->execute("OTA", "In progress");
            } else if (state == ota::OTA_COMPLETED) {
              set_component_value->execute("boot", "progress", 100);
              boot_log->execute("OTA", "Completed");
            } else if (state == ota::OTA_ERROR)
              boot_log->execute("OTA", "Error");

safe_mode:
  reboot_timeout: 15min
  num_attempts: 3
  on_safe_mode:
    then:
      - script.execute: safe_mode_loop

script:
  - id: api_reset
    mode: restart
    then:
      - lambda: id(api_is_updated) = false;
      - wait_until:
          condition:
            - lambda: return id(api_is_updated);
          timeout: 10s
      - if:
          condition:
            - lambda: return not id(api_is_updated);
          then:
            - logger.log: Resetting API
            - delay: 2s
            - lambda: api_server->on_shutdown();

  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_BASE}, "Base");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_BASE}, "Base");

  - id: dump_config
    mode: restart
    then:
      - delay: 30s
      - lambda: |-
          static const char *const TAG = "${project_tag}";
          // report API status
          if (api_server->is_connected()) {
            ESP_LOGCONFIG(TAG, "API:           Connected");
          } else {
            ESP_LOGW(TAG, "API:           DISCONNECTED");
          }

          // if (!(wifi_component->is_connected()) or !api_server->is_connected()) reset_boot_steps();

          // Report ESPHome
          ESP_LOGCONFIG(TAG, "ESPHome:");
          ESP_LOGCONFIG(TAG, "  Version:     ${version}");
          ESP_LOGCONFIG(TAG, "  Compiler:    %s", ESPHOME_VERSION);
          // Report framework
          #ifdef ARDUINO
          ESP_LOGCONFIG(TAG, "  Framework:   Arduino");
          #elif defined(USE_ESP_IDF)
          ESP_LOGCONFIG(TAG, "  Framework:   ESP-IDF");
          #else
          ESP_LOGW(TAG, "  Framework:   UNKNOWN");
          #endif
          // Report Loop time
          ESP_LOGCONFIG(TAG, "Loop time:     %" PRIu32, static_cast<uint32_t>(debug_loop_time->state));
          ESP_LOGCONFIG(TAG, "  Max:         %" PRIu32, id(max_loop_time));
          ESP_LOGCONFIG(TAG, "  Threshold:   %" PRIu32, ${loop_time_threshold});
          dump_config_packages->execute();

  - id: dump_config_packages
    mode: restart
    then:
      - lambda: |-
          static const char *const TAG = "${project_tag}";
          ESP_LOGCONFIG(TAG, "Packages:");
          ESP_LOGCONFIG(TAG, "  - Core");
          #if defined(USE_ESP32_BLE_SERVER) || \
              defined(USE_ESP32_BLE_CLIENT) || \
              defined(USE_BLUETOOTH_PROXY) || \
              defined(USE_CAPTIVE_PORTAL) || \
              defined(USE_IMPROV) || \
              defined(USE_WEBSERVER)
          ESP_LOGCONFIG(TAG, "ESPHome components:");
          #ifdef USE_ESP32_BLE_SERVER
          ESP_LOGCONFIG(TAG, "  - BLE server");
          #endif
          #ifdef USE_ESP32_BLE_CLIENT
          ESP_LOGCONFIG(TAG, "  - BLE tracker");
          #endif
          #ifdef USE_BLUETOOTH_PROXY
          ESP_LOGCONFIG(TAG, "  - Bluetooth proxy");
          #endif
          #ifdef USE_CAPTIVE_PORTAL
          ESP_LOGCONFIG(TAG, "  - Captive portal");
          #endif
          #ifdef USE_IMPROV
          ESP_LOGCONFIG(TAG, "  - Improv (BLE)");
          #endif
          #ifdef USE_WEBSERVER
          ESP_LOGCONFIG(TAG, "  - Web server");
          #endif
          #endif
      # Extended by:
      #   - nspanel_esphome_advanced.yaml
      #   - nspanel_esphome_addon_bluetooth_proxy.yaml
      #   - nspanel_esphome_addon_climate_base.yaml
      #   - nspanel_esphome_addon_climate_cool.yaml
      #   - nspanel_esphome_addon_climate_dual.yaml
      #   - nspanel_esphome_addon_climate_heat.yaml
      #   - nspanel_esphome_addon_cover.yaml
      #   - nspanel_esphome_addon_upload_tft.yaml
      #   - nspanel_esphome_prebuild.yaml
      #   - wall_display.yaml

  - id: ha_button
    mode: parallel
    parameters:
      page: string
      component: string
      command: string
    then:
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: button_click
            page: !lambda return page.c_str();
            component: !lambda return component.c_str();
            command: !lambda return command.c_str();

  - id: ha_call_action
    mode: parallel
    parameters:
      action: string
      key: string
      value: string
      entity: string
    then:
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: action_call
            action: !lambda return action.c_str();
            key: !lambda return key.c_str();
            value: !lambda return value.c_str();
            entity: !lambda return entity.c_str();

  - id: safe_mode_loop
    mode: restart
    then:
      - lambda: |-
          id(is_safe_mode) = true;
          screen_power->turn_off();
      - delay: 30s
      - script.execute: safe_mode_loop

  - id: set_var_bool
    mode: queued
    parameters:
      component: string
      val: bool
    then:  # There's nothing here so far

  - id: set_var_number
    mode: queued
    parameters:
      component: string
      val: float
    then:  # There's nothing here so far

  - id: set_var_string
    mode: queued
    parameters:
      component: string
      val: string
    then:  # There's nothing here so far

  - id: stop_all
    mode: restart
    then:
      - lambda: |-
          api_reset->stop();
          dump_config->stop();
          ha_button->stop();
          ha_call_action->stop();
          safe_mode_loop->stop();
          time_watchdog->stop();

  - id: time_watchdog  # The name `watchdog` is reserved
    mode: restart
    then:
      - lambda: |-
          if (debug_loop_time->state > ${loop_time_threshold})
            stop_all->execute();
          if (!api_server->is_connected() and
              id(current_page_id) != ${PAGE_ID_BLANK} and
              id(current_page_id) != ${PAGE_ID_BOOT} and
              id(current_page_id) != ${PAGE_ID_CONFIRM} and
              id(current_page_id) != ${PAGE_ID_HOME} and
              id(current_page_id) != ${PAGE_ID_QRCODE} and
              id(current_page_id) != ${PAGE_ID_SCREENSAVER} and
              id(current_page_id) != ${PAGE_ID_SETTINGS}) {
            ESP_LOGW("script.time_watchdog", "API disconnected. Falling back to Home page.");
            goto_page_id->execute(${PAGE_ID_HOME}, false);
            reset_boot_steps();
          }
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml
      #   - nspanel_esphome_core_hw_wifi.yaml

sensor:
  - platform: debug
    loop_time:
      id: debug_loop_time
      name: Loop time
      on_value:
        then:
          - lambda: |-
              if (x > id(max_loop_time))
                id(max_loop_time) = x;

text_sensor:
  - id: detailed_entity  # Entity Id of the entity displayed on the detailed pages
    name: Detailed Entity
    platform: template
    icon: mdi:tablet-dashboard
    internal: false
    disabled_by_default: false
    on_value:
      then:
        - if:
            condition:
              - lambda: return not x.empty();
            then:
              - lambda: |-
                  ESP_LOGI("text_sensor.detailed_entity", "Entity shown: %s", x.c_str());

time:
  - id: !extend time_provider
    on_time:
      - seconds: 30  # Watchdog - Every minute, at second 30
        then:
          - script.execute: time_watchdog

      - minutes: /10
        seconds: 5
        then:
          - script.execute: dump_config
...
