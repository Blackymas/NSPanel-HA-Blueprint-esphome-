#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - BUTTONS                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  invalid_cooldown: "100ms"
  buttons_color_on: "7519"
  buttons_color_off: "10597"
  ##############################
  BOOT_STEP_HW_BUTTONS: '1UL << 3'

binary_sensor:
  - id: left_button  # LEFT BUTTON BELOW DISPLAY TO TOGGLE RELAY
    name: Left Button
    platform: gpio
    pin:
      number: 14
      inverted: true
    on_press:
      then:
        - lambda: |-
            ESP_LOGI("binary_sensor.left_button.on_press", "Left button - Pressed");
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml
    on_multi_click:
      - timing: &long_click-timing
          - ON for at least 0.8s
        invalid_cooldown: ${invalid_cooldown}
        then:
          - lambda: |-
              ESP_LOGI("binary_sensor.left_button.on_multi_click", "Left button - Long click");
              ha_button->execute(page_names[id(current_page_id)], "hw_bt_left", "long_click");
      - timing: &short_click-timing
          - ON for at most 0.8s
        invalid_cooldown: ${invalid_cooldown}
        then:
          - lambda: |-
              ESP_LOGI("binary_sensor.left_button.on_multi_click", "Left button - Short click");
              if (
                  id(relay1_local) or
                  (id(relay1_fallback) and (!api_server->is_connected() or !wifi_component->is_connected()))
                )
                relay_1->toggle();
              ha_button->execute(page_names[id(current_page_id)], "hw_bt_left", "short_click");

  - id: right_button  # RIGHT BUTTON BELOW DISPLAY TO TOGGLE RELAY
    name: Right Button
    platform: gpio
    pin:
      number: 27
      inverted: true
    on_press:
      then:
        - lambda: |-
            ESP_LOGI("binary_sensor.right_button.on_press", "Right button - Pressed");
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml
    on_multi_click:
      - timing: *long_click-timing
        invalid_cooldown: ${invalid_cooldown}
        then:
          - lambda: |-
              ESP_LOGI("binary_sensor.right_button.on_multi_click", "Right button - Long click");
              ha_button->execute(page_names[id(current_page_id)], "hw_bt_right", "long_click");
      - timing: *short_click-timing
        invalid_cooldown: ${invalid_cooldown}
        then:
          - lambda: |-
              ESP_LOGI("binary_sensor.right_button.on_multi_click", "Right button - Short click");
              if (
                  id(relay2_local) or
                  (id(relay2_fallback) and (!api_server->is_connected() or !wifi_component->is_connected()))
                )
                relay_2->toggle();
              ha_button->execute(page_names[id(current_page_id)], "hw_bt_right", "short_click");

globals:
  - id: button_left_enabled
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: button_left_state
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: button_right_enabled
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: button_right_state
    type: bool
    restore_value: false
    initial_value: 'false'

  - id: buttons_color_on
    type: uint16_t
    restore_value: true
    initial_value: '${buttons_color_on}'
  - id: buttons_color_off
    type: uint16_t
    restore_value: true
    initial_value: '${buttons_color_off}'
  - id: buttons_bars_pages
    type: uint32_t
    restore_value: true
    initial_value: '1'

script:
  - id: !extend boot_progress_dump  # Defined by nspanel_esphome_core_boot.yaml
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_HW_BUTTONS}, "HW Buttons");

  - id: hw_buttons_bars_refresh
    mode: restart
    parameters:
      button_mask: uint8_t
    then:
      - lambda: |-
          if ((id(buttons_bars_pages) & (1 << id(current_page_id))) != 0) {
            switch (id(display_mode)) {
              case 1:  // EU model
                if (button_mask & 1 and id(button_left_enabled)) {  // Left button
                  disp1->fill_area(48, 307, 118, 3,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(47, 308, 120, 1,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(button_right_enabled)) {  // Right button
                  disp1->fill_area(289, 307, 118, 3,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(288, 308, 120, 1,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
              case 2:  // US Portrait
                if (button_mask & 1 and id(button_left_enabled)) {  // Left button
                  disp1->fill_area(17, 466, 118, 3,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(16, 467, 120, 1,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(button_right_enabled)) {  // Right button
                  disp1->fill_area(184, 466, 118, 3,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(183, 467, 120, 1,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
              case 3:  // US Landscape
                if (button_mask & 1 and id(button_left_enabled)) {  // Left button
                  disp1->fill_area(467, 174, 3, 118,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(468, 173, 1, 120,
                                    id(button_left_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                if (button_mask & 2 and id(button_right_enabled)) {  // Right button
                  disp1->fill_area(467, 28, 3, 118,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                  disp1->fill_area(468, 27, 1, 120,
                                    id(button_right_state) ? id(buttons_color_on) : id(buttons_color_off));
                }
                break;
            }
          }

  - id: hw_buttons_boot_progress
    mode: queued
    parameters:
      sub_step_name: string
    then:
      - lambda: |-
          static uint8_t hw_buttons_boot_steps_count = 0;
          hw_buttons_boot_steps_count++;
          boot_progress->execute(hw_buttons_boot_steps_count >= 3 ? ${BOOT_STEP_HW_BUTTONS} : 0,
                                ("HW Buttons - " + sub_step_name).c_str());

  - id: !extend page_changed  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - &hw_buttons_bars_refresh_3
        script.execute:
          id: hw_buttons_bars_refresh
          button_mask: 3
      - delay: 1s
      - *hw_buttons_bars_refresh_3

  - id: !extend set_var_number  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          if (component == "hw_button_state" and val >= 0) {
            uint8_t val_uint = static_cast<uint8_t>(val);
            id(button_left_enabled) = ((val_uint & 0x03) == 3) ? false
                                    : ((val_uint & 0x03) == 1 || (val_uint & 0x03) == 2) ? true
                                    : id(button_left_enabled);
            id(button_left_state) = ((val_uint & 0x03) == 1) ? true
                                  : ((val_uint & 0x03) == 2) ? false
                                  : id(button_left_state);
            id(button_right_enabled) = (((val_uint >> 2) & 0x03) == 3) ? false
                                      : (((val_uint >> 2) & 0x03) == 1 || ((val_uint >> 2) & 0x03) == 2) ? true
                                      : id(button_right_enabled);
            id(button_right_state) = (((val_uint >> 2) & 0x03) == 1) ? true
                                    : (((val_uint >> 2) & 0x03) == 2) ? false
                                    : id(button_right_state);
            hw_buttons_bars_refresh->execute(
                (((val_uint & 0x03) != 0) ? 1 : 0) +
                (((val_uint >> 2) & 0x03) != 0 ? 1 : 0)
            );
          } else if (component == "button_bar_color_on" and val >= 0) {
            id(buttons_color_on) = val;
            hw_buttons_boot_progress->execute("Bar color - On");
          } else if (component == "button_bar_color_off" and val >= 0) {
            id(buttons_color_off) = val;
            hw_buttons_boot_progress->execute("Bar color - Off");
          } else if (component == "buttons_bars_pages" and val >= 0) {
            id(buttons_bars_pages) = val;
            hw_buttons_boot_progress->execute("Bar pages");
          }

  - id: !extend stop_all  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          hw_buttons_bars_refresh->stop();
          hw_buttons_boot_progress->stop();

time:
  - id: !extend time_provider
    on_time:
      - seconds: 0
        then:
          - *hw_buttons_bars_refresh_3
...
