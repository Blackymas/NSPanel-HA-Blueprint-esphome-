#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - VERSIONING                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##### DON'T CHANGE THIS ######
  version: 4.4.0.dev6
  ##############################
  BOOT_STEP_VERSIONING: '1UL << 26'

esphome:
  project:
    version: "${version}"

globals:
  - id: version_blueprint
    type: std::string
    restore_value: false
    initial_value: '""'

  - id: version_tft
    type: std::string
    restore_value: false
    initial_value: '""'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_VERSIONING}, "Versioning");

  - id: check_versions
    mode: restart
    then:
      - if:
          condition:
            - lambda: return not is_boot_step_completed(${BOOT_STEP_VERSIONING});
          then:
            - wait_until:
                condition:
                  - lambda: return id(version_tft) == "${version}";
                  - lambda: return id(version_blueprint) == "${version}";
                timeout: 120s
            - lambda: |-
                boot_log->execute("Versions", "Reporting");
                if (id(version_tft) == "${version}" and id(version_blueprint) == "${version}")
                  boot_progress->execute(${BOOT_STEP_VERSIONING}, "Version");
                ESP_LOGI("script.check_versions", "Versions:");
                ESP_LOGI("script.check_versions", "  TFT:       %s", id(version_tft).c_str());
                ESP_LOGI("script.check_versions", "  ESPHome:   ${version}");
                if (id(version_tft) != "${version}")
                  ESP_LOGE("script.check_versions", "TFT version mismatch!");
                ESP_LOGI("script.check_versions", "  Blueprint: %s", id(version_blueprint).c_str());
                if (id(version_blueprint) != "${version}")
                  ESP_LOGE("script.check_versions", "Blueprint version mismatch!");
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: version
                  tft: !lambda return id(version_tft).c_str();
                  esphome: ${version}
                  blueprint: !lambda return id(version_blueprint).c_str();

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${project_tag}", "Blueprint:");
          if (!id(version_blueprint).empty())
            ESP_LOGCONFIG("${project_tag}", "  Version:     %s", id(version_blueprint).c_str());
          else
            ESP_LOGW("${project_tag}", "  Version:     UNKNOWN");

  - id: !extend event_from_display  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (id(version_tft).empty()) {
            const std::string event = json["event"];
            if (event == "params") {
              ESP_LOGI("script.event_from_display (versioning)", "Got new parameters from Nextion");
              id(version_tft) = json["version"].as<std::string>();
              check_versions->execute();
            }
          }

  - id: !extend page_boot
    then:
      - script.execute: page_boot_versions

  - id: page_boot_versions
    mode: restart
    then:
      - lambda: |-
          boot_log->execute("Boot", "ESPHome FW v${version}");
          set_component_text->execute(${PAGE_ID_BOOT}, "ver_firmware", "Firmware: ${version}");
          if (id(version_blueprint).empty())
            boot_log->execute("Boot", "Waiting for Blueprint version");
      - wait_until:
          condition:
            - lambda: return not id(version_blueprint).empty();
          timeout: 20s

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "version_blueprint") {
            id(version_blueprint) = val;
            set_component_text->execute(${PAGE_ID_BOOT}, "ver_blueprint",
                                        ("Blueprint: " + id(version_blueprint)).c_str());
            ESP_LOGI("script.set_var_string", "Blueprint version: %s", id(version_blueprint).c_str());
            check_versions->execute();
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          check_versions->stop();
          page_boot_versions->stop();
...
