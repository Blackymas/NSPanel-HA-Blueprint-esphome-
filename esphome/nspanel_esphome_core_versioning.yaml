#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - VERSIONING                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  BOOT_STEP_VERSIONING: '1UL << 26'

display:
  - id: !extend disp1
    on_setup:
      then:
        - lambda: version_tft->update();

esphome:
  project:
    version: "${version}"

  on_boot:
    - priority: 600.01
      then:
        - lambda: |-
            boot_log->execute("on_boot", "Publish firmware version");
            version_esphome->publish_state("${version}");

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_VERSIONING}, "Versioning");

  - id: !extend boot_sequence
    then:
      - while:
          condition:
            - lambda: return version_tft->state.empty();
          then:
            - lambda: |-
                ESP_LOGI("script.boot_sequence (versioning)", "Updating TFT version");
                version_tft->update();
            - wait_until:
                condition:
                  - lambda: return not version_tft->state.empty();
                timeout: 10s

  - id: check_versions
    mode: restart
    then:
      - if:
          condition:
            - lambda: return !is_boot_step_completed(${BOOT_STEP_VERSIONING});
          then:
            - wait_until:
                condition:
                  - lambda: return version_tft->state == "${version}";
                  - lambda: return version_blueprint->state == "${version}";
                timeout: 90s
            - lambda: |-
                boot_log->execute("Versions", "Reporting");
                if (version_tft->state == "${version}" and version_blueprint->state == "${version}")
                  boot_progress->execute(${BOOT_STEP_VERSIONING}, "Version");
                ESP_LOGI("script.check_versions", "Versions:");
                ESP_LOGI("script.check_versions", "  TFT:       %s", version_tft->state.c_str());
                ESP_LOGI("script.check_versions", "  ESPHome:   ${version}");
                if (version_tft->state != "${version}")
                  ESP_LOGE("script.check_versions", "TFT version mismatch!");
                ESP_LOGI("script.check_versions", "  Blueprint: %s", version_blueprint->state.c_str());
                if (version_blueprint->state != "${version}")
                  ESP_LOGE("script.check_versions", "Blueprint version mismatch!");
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: version
                  tft: !lambda return version_tft->state.c_str();
                  esphome: ${version}
                  blueprint: !lambda return version_blueprint->state.c_str();

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${project_tag}", "Blueprint:");
          if (!version_blueprint->state.empty())
            ESP_LOGCONFIG("${project_tag}", "  Version:     %s", version_blueprint->state.c_str());
          else
            ESP_LOGW("${project_tag}", "  Version:     UNKNOWN");

  - id: !extend page_boot
    then:
      - script.execute: page_boot_versions

  - id: page_boot_versions
    mode: restart
    then:
      - lambda: |-
          boot_log->execute("Boot", "ESPHome FW v${version}");
          set_component_text->execute("boot", "ver_firmware", "Firmware: ${version}");
          if (version_blueprint->state.empty())
            boot_log->execute("Boot", "Waiting for Blueprint version");
      - wait_until:
          condition:
            - lambda: return not version_blueprint->state.empty();
          timeout: 20s

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "version_blueprint" and !val.empty())
            version_blueprint->publish_state(val.c_str());

  - id: !extend stop_all
    then:
      - lambda: |-
          check_versions->stop();
          page_boot_versions->stop();

text_sensor:
  - id: version_blueprint
    name: Version Blueprint
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      then:
        - lambda: |-
            check_versions->execute();
            if (current_page->state == "boot")
              disp1->set_component_text_printf("ver_blueprint", "Blueprint: %s", x.c_str());
            ESP_LOGI("text_sensor.version_blueprint", "Blueprint version: %s", x.c_str());

  - id: version_esphome
    name: Version ESPHome
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    lambda: return {"${version}"};

  - id: version_tft
    name: Version TFT
    platform: nextion
    component_name: boot.version
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    filters:
      - lambda: |-
          x = x.c_str();
          x.shrink_to_fit();
          return x;
    on_value:
      then:
        - script.execute: check_versions
...
