#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BUTTONS PAGES                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  BOOT_STEP_PAGE_BUTTONS: '1UL << 11'
  PAGE_ID_BUTTONPAGE01: '12'
  PAGE_ID_BUTTONPAGE02: '13'
  PAGE_ID_BUTTONPAGE03: '14'
  PAGE_ID_BUTTONPAGE04: '15'

api:
  id: !extend api_server
  actions:
    # Dynamically configures button properties on a specified page, enhancing UI interactivity by allowing updates to button appearance and behavior based on given parameters.
    - action: button  # yamllint disable-line rule:indentation
      variables:
        id: uint8_t        # Button index (0 to 32)
        page: string       # Identifier of the page where the button is located.
        component: string  # Unique identifier for the button.
        state: bool        # Determines the button's state, influencing background and other visual aspects.
        icon: string       # Icon codepoint from HASwitchPlate Material Design Icons. Example: "\uE6E8" for mdi:lightbulb-on-outline.
        icon_color: int[]  # RGB color array for the icon.
        icon_font: int     # Nextion font identifier for the icon, default is 8.
        bri: string        # Brightness level or other dynamic info to be displayed close to the icon.
        label: string      # Main text label for the button.
      then:
        - lambda: |-
            if (current_page->state == page) {
              set_component_picc->execute(page.c_str(), (component + "pic").c_str(), state ? 47 : 46);
              set_component_picc->execute(page.c_str(), (component + "bri").c_str(), state ? 47 : 46);
              set_component_picc->execute(page.c_str(), (component + "text").c_str(), state ? 47 : 46);
              set_component_picc->execute(page.c_str(), (component + "icon").c_str(), state ? 47 : 46);
              set_component_font->execute(page.c_str(), (component + "icon").c_str(), icon_font);
              set_component_foreground_color->execute(page.c_str(), (component + "bri").c_str(), state ? 10597 : 65535);
              set_component_foreground_color->execute(page.c_str(), (component + "text").c_str(), state ? 10597 : 65535);
              set_component_font_color->execute(page.c_str(), (component + "icon").c_str(),
                                                              (((icon_color[0] & 0xF8) << 8) |
                                                              ((icon_color[1] & 0xFC) << 3) |
                                                              (icon_color[2] >> 3)));
              set_component_text->execute(page.c_str(), (component + "icon").c_str(), icon.c_str());
              display_wrapped_text->execute(page.c_str(), (component + "text").c_str(), label.c_str(), 10);
              set_component_text->execute(page.c_str(), (component + "bri").c_str(), (strcmp(bri.c_str(), "0") == 0) ? " " : bri.c_str());
              set_component_visibility->execute(page.c_str(), (component + "pic").c_str(), true);
              set_component_visibility->execute(page.c_str(), (component + "icon").c_str(), true);
              set_component_visibility->execute(page.c_str(), (component + "text").c_str(), true);
              set_component_visibility->execute(page.c_str(), (component + "bri").c_str(), true);
              set_component_visibility->execute(page.c_str(), component.c_str(), true);
            }

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_BUTTONS}, "Page Buttons");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          if (!PageButtonsButtonInitilized)
            setup_pagebuttons_buttons();
          boot_progress->execute(${BOOT_STEP_PAGE_BUTTONS}, "Page Buttons");

  - id: page_buttonpage
    mode: restart
    parameters:
      page_number: uint
    then:  # There's nothing here so far

  - id: !extend page_changed
    then:
      - lambda: |-
          if (id(current_page_id) == ${PAGE_ID_BUTTONPAGE01}) page_buttonpage->execute(1);
          else if (id(current_page_id) == ${PAGE_ID_BUTTONPAGE02}) page_buttonpage->execute(2);
          else if (id(current_page_id) == ${PAGE_ID_BUTTONPAGE03}) page_buttonpage->execute(3);
          else if (id(current_page_id) == ${PAGE_ID_BUTTONPAGE04}) page_buttonpage->execute(4);

  - id: !extend stop_all
    then:
      - script.stop: page_buttonpage
...
