#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BUTTONS PAGES                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  BOOT_STEP_PAGE_BUTTONS: '1UL << 11'
  PAGE_ID_BUTTONPAGE01: '12'
  PAGE_ID_BUTTONPAGE02: '13'
  PAGE_ID_BUTTONPAGE03: '14'
  PAGE_ID_BUTTONPAGE04: '15'

api:
  id: !extend api_server
  actions:
    # Dynamically configures button properties on a specified page,
    # enhancing UI interactivity by allowing updates to button appearance and behavior based on given parameters.
    - action: button
      variables:
        id: int            # Button index (0 to 32)
        page: string       # Identifier of the page where the button is located.
        component: string  # Unique identifier for the button.
        state: bool        # Determines the button's state, influencing background and other visual aspects.
        icon: string       # Codepoint from HASwitchPlate Material Design Icons. "\uE6E8" for mdi:lightbulb-on-outline.
        icon_color: int[]  # RGB color array for the icon.
        icon_font: int     # Nextion font identifier for the icon, default is 8.
        bri: string        # Brightness level or other dynamic info to be displayed close to the icon.
        label: string      # Main text label for the button.
      then:
        - lambda: |-
            ESP_LOGD("api.actions.button", "Received data for button %i", id);
            if (id >= 1 and id <= 32) {
              const uint8_t index = static_cast<uint8_t>(id) - 1;
              const uint8_t page_id = get_page_id(page.c_str());
              const bool changed_visibility = !buttonpage_buttons[index].visible;

              // Button state
              if (changed_visibility or buttonpage_buttons[index].state != state) {
                buttonpage_buttons[index].state = state;
                if (current_page->state == page)
                  page_buttonpage_button_renderer_state->execute(index, page_id, component.c_str());
              }

              // Icon font
              if (changed_visibility or buttonpage_buttons[index].icon_font != icon_font) {
                buttonpage_buttons[index].icon_font = icon_font;
                if (current_page->state == page)
                  page_buttonpage_button_renderer_icon_font->execute(index, page_id, component.c_str());
              }

              // Icon color
              if (icon_color.size() == 3) {
                const uint16_t new_icon_color = ((icon_color[0] & 0xF8) << 8) |
                                                ((icon_color[1] & 0xFC) << 3) |
                                                (icon_color[2] >> 3);
                if (changed_visibility or buttonpage_buttons[index].icon_color != new_icon_color) {
                  buttonpage_buttons[index].icon_color = new_icon_color;
                  if (current_page->state == page)
                    page_buttonpage_button_renderer_icon_color->execute(index, page_id, component.c_str());
                }
              }

              // Icon
              if (changed_visibility or buttonpage_buttons[index].icon != icon) {
                copyStringToCharArray(buttonpage_buttons[index].icon, icon);
                if (current_page->state == page)
                  page_buttonpage_button_renderer_icon->execute(index, page_id, component.c_str());
              }

              // Label
              if (changed_visibility or buttonpage_buttons[index].label != label) {
                copyStringToCharArray(buttonpage_buttons[index].label, label);
                if (current_page->state == page)
                  page_buttonpage_button_renderer_label->execute(index, page_id, component.c_str());
              }

              // Bri
              if (changed_visibility or buttonpage_buttons[index].bri != bri) {
                copyStringToCharArray(buttonpage_buttons[index].bri, bri);
                if (current_page->state == page)
                  page_buttonpage_button_renderer_bri->execute(index, page_id, component.c_str());
              }

              // Button visibility
              if (changed_visibility) {
                buttonpage_buttons[index].visible = true;
                if (current_page->state == page)
                  page_buttonpage_button_renderer_visibility->execute(index, page_id, component.c_str());
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_PAGE_BUTTONS
  on_boot:
    - priority: 1000.11
      then:
        - lambda: |-
            setup_pagebuttons_buttons();

script:
  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_PAGE_BUTTONS}, "Page Buttons");

  - id: page_buttonpage
    mode: restart
    parameters:
      page_number: uint8_t
    then:
      - repeat:
          count: 8
          then:
            - delay: !lambda return nextion_queue_delay_factor->state*id(nextion_queue);
            - lambda: |-
                const uint8_t index = (page_number-1)*8 + iteration;
                if (buttonpage_buttons[index].visible) {
                  char component[10];
                  sprintf(component, "button%02d", iteration+1);
                  ESP_LOGD("script.page_buttonpage", "Rendering %s - %s", current_page->state.c_str(), component);
                  page_buttonpage_button_renderer->execute(index, current_page_id, component);
                }

  - id: page_buttonpage_button_renderer
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          page_buttonpage_button_renderer_bri->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_icon->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_icon_color->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_icon_font->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_label->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_state->execute(index, page_id, component.c_str());
          page_buttonpage_button_renderer_visibility->execute(index, page_id, component.c_str());

  - id: page_buttonpage_button_renderer_bri
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          display_component_update_text->execute(get_component(page_id, (component + "bri").c_str()),
                                                  (strcmp(buttonpage_buttons[index].bri, "0") == 0) ?
                                                  " " : buttonpage_buttons[index].bri);

  - id: page_buttonpage_button_renderer_icon
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          display_component_update_text->execute(get_component(page_id, (component + "icon").c_str()),
                                                  buttonpage_buttons[index].icon);

  - id: page_buttonpage_button_renderer_icon_color
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          set_component_font_color->execute(page_id, (component + "icon").c_str(),
                                            buttonpage_buttons[index].icon_color);

  - id: page_buttonpage_button_renderer_icon_font
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          set_component_font->execute(page_id, (component + "icon").c_str(), buttonpage_buttons[index].icon_font);

  - id: page_buttonpage_button_renderer_label
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          display_wrapped_text->execute(page_id, (component + "text").c_str(),
                                        buttonpage_buttons[index].label, 10 * id(mui_bytes_per_char));

  - id: page_buttonpage_button_renderer_state
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          set_component_picc->execute(page_id, (component + "pic").c_str(),
                                      buttonpage_buttons[index].state ? 47 : 46);
          set_component_picc->execute(page_id, (component + "bri").c_str(),
                                      buttonpage_buttons[index].state ? 47 : 46);
          set_component_picc->execute(page_id, (component + "text").c_str(),
                                      buttonpage_buttons[index].state ? 47 : 46);
          set_component_picc->execute(page_id, (component + "icon").c_str(),
                                      buttonpage_buttons[index].state ? 47 : 46);
          set_component_foreground_color->execute(page_id, (component + "bri").c_str(),
                                                  buttonpage_buttons[index].state ? 10597 : 65535);
          set_component_foreground_color->execute(page_id, (component + "text").c_str(),
                                                  buttonpage_buttons[index].state ? 10597 : 65535);

  - id: page_buttonpage_button_renderer_visibility
    mode: parallel
    parameters:
      index: uint8_t
      page_id: uint8_t
      component: string
    then:
      - lambda: |-
          set_component_visibility->execute(page_id, (component + "pic").c_str(), buttonpage_buttons[index].visible);
          set_component_visibility->execute(page_id, (component + "icon").c_str(), buttonpage_buttons[index].visible);
          set_component_visibility->execute(page_id, (component + "text").c_str(), buttonpage_buttons[index].visible);
          set_component_visibility->execute(page_id, (component + "bri").c_str(), buttonpage_buttons[index].visible);
          set_component_visibility->execute(page_id, component.c_str(), buttonpage_buttons[index].visible);

  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_BUTTONS}, "Page Buttons");

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_ID_BUTTONPAGE01}) page_buttonpage->execute(1);
          else if (current_page_id == ${PAGE_ID_BUTTONPAGE02}) page_buttonpage->execute(2);
          else if (current_page_id == ${PAGE_ID_BUTTONPAGE03}) page_buttonpage->execute(3);
          else if (current_page_id == ${PAGE_ID_BUTTONPAGE04}) page_buttonpage->execute(4);

  - id: !extend stop_all
    then:
      - lambda: |-
          page_buttonpage->stop();
          page_buttonpage_button_renderer->stop();
          page_buttonpage_button_renderer_bri->stop();
          page_buttonpage_button_renderer_icon->stop();
          page_buttonpage_button_renderer_icon_color->stop();
          page_buttonpage_button_renderer_icon_font->stop();
          page_buttonpage_button_renderer_label->stop();
          page_buttonpage_button_renderer_state->stop();
          page_buttonpage_button_renderer_visibility->stop();
...
