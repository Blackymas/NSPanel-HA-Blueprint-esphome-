#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_BOOT: '1'

api:
  on_client_connected:
    then:
      - script.execute:
          id: page_boot_log
          category: API
          log_message: Client connected

display:
  - id: !extend disp1
    on_setup:
      then:
        - lambda: |-
            disp1->send_command("esphome=0");
            set_brightness->execute(100);
            nextion_init->publish_state(disp1->is_setup());

    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    arch_restart();
                  }
                  break;
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_BOOT
  on_boot:
    - priority: 1000.1
      then:
        - script.execute: boot_package_register

    - priority: 900.1
      then:
        - script.execute: boot_initialize

    - priority: 600.1
      then:
        - script.execute: boot_sequence

script:
  - id: boot_event
    mode: restart
    then:
      - delay: 120s
      - while:
          condition:
            - lambda: return not is_boot_complete();
          then:
            - homeassistant.event:
                event: esphome.nspanel_ha_blueprint
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: boot
                  step: timeout
                  get_completed_boot_steps(): !lambda return get_completed_boot_steps();
            - delay: 120s

  - id: boot_initialize
    mode: single
    then:
    # Extended by:
    #   nspanel_esphome_core_hw_display.yaml

  - id: boot_package_register
    mode: restart
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_BOOT}, "Boot");

  - id: boot_package_register_add
    mode: queued
    parameters:
      package_id: uint8_t
      package_name: string
    then:
      - lambda: |-
          const bool package_registered = register_application(package_id, package_name.c_str());
          ESP_LOGI("script.boot_package_register", "Package '%s' (id %" PRIu32 ") %s.", package_name.c_str(),
                    package_id, package_registered ? "registered" : "FAILED TO REGISTER");

  - id: boot_progress
    mode: restart
    parameters:
      step: uint8_t
    then:
      - lambda: |-
          boot_progress_dump_timer->execute();
          complete_boot_step(step);
          ESP_LOGI("script.boot_progress", "Boot step completed: %s (step %i of %i - %i%%)", get_boot_step(step)->name,
                    get_completed_boot_steps(), get_total_registered_boot_steps(), get_boot_progress_percentage());
          if (is_boot_complete())
            ESP_LOGI("script.boot_progress", "Progress: Boot sequence completed");

  - id: boot_progress_dump
    mode: queued
    then:
      - lambda: |-
          ESP_LOGCONFIG("script.boot_progress_dump", "Boot progress: %" PRIu8 "%% (%" PRIu32 ")",
                        get_boot_progress_percentage(), get_completed_boot_steps());
          if (boot_steps != nullptr) {
            for (size_t i = 0; i < MAX_BOOT_STEPS; ++i) {
              if (boot_steps[i].included) {
                const int8_t padding =
                  std::max(0, 21 - static_cast<int>(sizeof(boot_steps[i].name))); // Dynamic padding
                ESP_LOGCONFIG("script.boot_progress_dump", " - %s:%*s%s", boot_steps[i].name, padding, "",
                              boot_steps[i].completed ? "Completed" : "PENDING");
              }
            }
          } else {
            ESP_LOGE("script.boot_progress_dump", "Boot steps have not been initialized.");
          }

  - id: boot_progress_dump_timer
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return get_boot_progress_percentage() == 100;
          timeout: 60s
      - script.execute: boot_progress_dump

  - id: boot_sequence
    mode: single
    then:
      - script.execute: boot_progress_dump
      - lambda: |-
          if (!disp1->is_setup())
            page_boot_log->execute("Boot", "Waiting for Nextion");
      - wait_until:
          condition:
            - lambda: return disp1->is_setup();
          timeout: 10s
      - delay: 1s
      - lambda: |-
          if (current_page_id != ${PAGE_ID_BOOT}) {
            page_changed->execute(${PAGE_ID_BOOT});
            page_boot_log->execute("Boot", "Waiting for page Boot");
          }
      - wait_until:
          condition:
            - lambda: return current_page_id == ${PAGE_ID_BOOT};
          timeout: 10s
      - lambda: |-
          if (!wifi_component->is_connected())
            page_boot_log->execute("Boot", "Waiting for Wi-Fi");
      - wait_until:
          condition:
            - wifi.connected:
          timeout: 10s
      - lambda: |-
          if (!api_server->is_connected())
            page_boot_log->execute("Boot", "Waiting for API");
      - wait_until:
          condition:
            - api.connected:
          timeout: 10s
      - delay: 2s
      - lambda: |-
          page_boot_log->execute("Boot", "Report to Blueprint");
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: boot
            step: start
            get_completed_boot_steps(): !lambda return get_completed_boot_steps();
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_BOOT});
          boot_event->execute();

  - id: !extend dump_config
    then:
      - lambda: |-
          if (is_boot_complete())
            ESP_LOGCONFIG("${project_tag}", "Boot steps: %" PRIu8 "/%" PRIu8 " (100%%)",
                          get_completed_boot_steps(), get_total_registered_boot_steps());
          else {
            ESP_LOGW("${project_tag}", "Boot steps: %" PRIu8 "/%" PRIu8 " (%" PRIu8 "%% - %" PRIu32 ")",
                      get_completed_boot_steps(), get_total_registered_boot_steps(),
                      get_boot_progress_percentage(), get_completed_boot_steps());
            ESP_LOGW("${project_tag}", "  State:    %s",
                      ((wifi_component->is_connected()) and api_server->is_connected()) ? "Pending" : "DISCONNECTED");
            boot_progress_dump->execute();
            ESP_LOGCONFIG("${project_tag}", "Requesting new boot parameters from Blueprint");
            boot_event->execute();
          }

  - id: !extend set_var_int
    then:
      - lambda: |-
          if (component == "BOOT_STEP")
            boot_progress->execute(static_cast<uint8_t>(val));

  - id: !extend stop_all
    then:
      - lambda: |-
          boot_event->stop();
          boot_initialize->stop();
          boot_package_register->stop();
          boot_progress->stop();
          boot_progress_dump_timer->stop();
...
