#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - Page Home                                                                  #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_HOME: '1UL << 17'
  PAGE_ID_HOME: '1'
  entity_id_weather: dummy.dummy
  PIC_ID_WEATHER_SUNNY: '2'
  PIC_ID_WEATHER_CLEAR_NIGHT: '15'
  PIC_ID_WEATHER_CLOUDY: '3'
  PIC_ID_WEATHER_RAINY: '4'
  PIC_ID_WEATHER_POURING: '5'
  PIC_ID_WEATHER_SNOWY: '6'
  PIC_ID_WEATHER_HAIL: '7'
  PIC_ID_WEATHER_SNOWY_RAINY: '7'
  PIC_ID_WEATHER_FOG: '8'
  PIC_ID_WEATHER_WINDY: '9'
  PIC_ID_WEATHER_LIGHTNING: '10'
  PIC_ID_WEATHER_PARTLYCLOUDY_DAY: '11'
  PIC_ID_WEATHER_PARTLYCLOUDY_NIGHT: '12'
  PIC_ID_WEATHER_LIGHTNING_RAINY_DAY: '13'
  PIC_ID_WEATHER_LIGHTNING_RAINY_NIGHT: '14'
  PIC_ID_WEATHER_UNKNOWN: '1'
  DEFAULT_ELEVATION: '-0.83333'

external_components:
  - source:
      type: git
      url: https://github.com/edwardtfn/esphome
      ref: sun-01
    # refresh: 300s
    components:
      - sun

globals:
  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

  ##### Date/time formats #####
  - id: home_date_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_time_format
    type: std::string
    restore_value: true
    max_restore_data_length: 20
    initial_value: '"%H:%M"'
  - id: home_time_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_meridiem_am
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"AM"'
  - id: mui_meridiem_pm
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"PM"'

  - id: last_weather_pic
    type: uint8_t
    restore_value: false
    initial_value: '0'

script:
  - id: !extend boot_progress_dump
    then:
      - lambda: |-
          boot_progress_dump_item->execute(${BOOT_STEP_PAGE_HOME}, "Page Home");

  - id: chip_font
    mode: restart
    parameters:
      chip_font: uint8_t
      boot: bool
    then:
      - lambda: |-
          if (boot or chip_font != id(home_chip_font_id))
            id(home_chip_font_id) = chip_font;
          set_component_font->execute("home", "wifi_icon", chip_font);
          set_component_font->execute("home", "chip_relay1", chip_font);
          set_component_font->execute("home", "chip_relay2", chip_font);
          set_component_font->execute("home", "chip_climate", chip_font);
      - repeat:
          count: 7
          then:
            - delay: !lambda return (10*(id(nextion_queue)+disp1->queue_size()+tf_uart->available()));
            - lambda: |-
                disp1->send_command_printf("home.chip%02" PRIu32 ".font=%" PRIu8, iteration, chip_font);
      - script.execute:
          id: page_home_boot_progress
          sub_step_name: Chip font

  - id: custom_buttons_font
    mode: restart
    parameters:
      custom_buttons_font: uint8_t
      boot: bool
    then:
      - lambda: |-
          if (boot or custom_buttons_font != id(home_custom_buttons_font_id))
            id(home_custom_buttons_font_id) = custom_buttons_font;
          set_component_font->execute("home","bt_notific", custom_buttons_font);
          set_component_font->execute("home","bt_qrcode", custom_buttons_font);
          set_component_font->execute("home", "bt_entities", custom_buttons_font);
      - repeat:
          count: 7
          then:
            - delay: !lambda return (10*(id(nextion_queue)+disp1->queue_size()+tf_uart->available()));
            - lambda: |-
                disp1->send_command_printf("home.button%02" PRIu32 ".font=%" PRIu8, iteration, custom_buttons_font);
      - script.execute:
          id: page_home_boot_progress
          sub_step_name: Custom buttons font

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_log->execute("Boot", "Set Home page elements");
          chip_font->execute(id(home_chip_font_id), true);
          custom_buttons_font->execute(id(home_custom_buttons_font_id), true);

  - id: !extend page_changed
    then:
      - lambda: |-
          if (id(current_page_id) == ${PAGE_ID_HOME})
            page_home->execute();

  - id: page_home
    mode: restart
    then:  # There's nothing here so far
      # Extended by:
      #   - nspanel_esphome_core_datetime.yaml
      #   - nspanel_esphome_core_hw_relays.yaml
      #   - nspanel_esphome_core_hw_wifi.yaml
      #   - nspanel_esphome_core_page_weather.yaml

  - id: page_home_boot_progress
    mode: queued
    parameters:
      sub_step_name: string
    then:
      - lambda: |-
          static uint8_t page_home_boot_steps_count = 0;
          page_home_boot_steps_count++;
          boot_progress->execute(page_home_boot_steps_count >= 2 ? ${BOOT_STEP_PAGE_HOME} : 0,
                                ("Page Home - " + sub_step_name).c_str());
          if (id(current_page_id) == ${PAGE_ID_BOOT} and wakeup_page_name->state == "home" and page_home_boot_steps_count >= 2) {
            ESP_LOGI("script.page_home_boot_progress", "Jump to Home page");
            goto_page_id->execute(${PAGE_ID_HOME}, true);
            set_variable_value->execute("wakeup_page_id", ${PAGE_ID_HOME});
          }

  - id: page_home_weather
    mode: restart
    then:
      - lambda: |-
          uint8_t pic = 0;
          if (nextion_weather->state == "sunny" or
              nextion_weather->state == "clear_night" or
              nextion_weather->state == "clear-night")
            pic = the_sun->is_above_horizon(${DEFAULT_ELEVATION}) ?
                  ${PIC_ID_WEATHER_SUNNY} :
                  ${PIC_ID_WEATHER_CLEAR_NIGHT};
          else if (nextion_weather->state == "cloudy")
            pic = ${PIC_ID_WEATHER_CLOUDY};
          else if (nextion_weather->state == "rainy")
            pic = ${PIC_ID_WEATHER_RAINY};
          else if (nextion_weather->state == "pouring")
            pic = ${PIC_ID_WEATHER_POURING};
          else if (nextion_weather->state == "hail")
            pic = ${PIC_ID_WEATHER_HAIL};
          else if (nextion_weather->state == "snowy")
            pic = ${PIC_ID_WEATHER_SNOWY};
          else if (nextion_weather->state == "snowy_rainy"
                or nextion_weather->state == "snowy-rainy")
            pic = ${PIC_ID_WEATHER_CLOUDY};
          else if (nextion_weather->state == "fog")
            pic = ${PIC_ID_WEATHER_FOG};
          else if (nextion_weather->state == "windy"
                or nextion_weather->state == "windy_variant"
                or nextion_weather->state == "windy-variant")
            pic = ${PIC_ID_WEATHER_WINDY};
          else if (nextion_weather->state == "partlycloudy")
            pic = the_sun->is_above_horizon(${DEFAULT_ELEVATION}) ?
                  ${PIC_ID_WEATHER_PARTLYCLOUDY_DAY} :
                  ${PIC_ID_WEATHER_PARTLYCLOUDY_NIGHT};
          else if (nextion_weather->state == "lightning")
            pic = ${PIC_ID_WEATHER_LIGHTNING};
          else if (nextion_weather->state == "lightning_rainy"
                or nextion_weather->state == "lightning-rainy"
                or nextion_weather->state == "execptional")
            pic = the_sun->is_above_horizon(${DEFAULT_ELEVATION}) ?
                  ${PIC_ID_WEATHER_LIGHTNING_RAINY_DAY} :
                  ${PIC_ID_WEATHER_LIGHTNING_RAINY_NIGHT};
          else if (nextion_weather->state == "unknown"
                or nextion_weather->state == "unavailable")
            pic = ${PIC_ID_WEATHER_UNKNOWN};
          if (id(last_weather_pic) != pic) {
            ESP_LOGI("script.page_home_weather", "New weather pic: %" PRIu8, pic);
            id(last_weather_pic) = pic;
            set_component_pic->execute("home", "weather_pic", pic);
          }

  - id: !extend set_var_number
    then:
      - lambda: |-
          if (component == "latitude") {
            the_sun->set_latitude(val);
            page_home_weather->execute();
          } else if (component == "longitude") {
            the_sun->set_longitude(val);
            page_home_weather->execute();
          } else if (component == "chip_font")
            chip_font->execute(val, false);
          else if (component == "custom_buttons_font")
            custom_buttons_font->execute(val, false);

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "weather_entity") {
            nextion_weather->set_entity_id(val.c_str());
            nextion_weather->dump_config();
            api_reset->execute();
          }

  - id: !extend refresh_datetime  # Defined by nspanel_esphome_core_datetime.yaml
    mode: restart
    then:
      - lambda: |-
          std::string time_format_str = process_time_format(id(mui_time_format).c_str(), id(time_provider).now().hour,
                                                            id(mui_meridiem_am).c_str(), id(mui_meridiem_pm).c_str());
          std::string meridiem_text = (id(time_provider).now().hour<12) ? id(mui_meridiem_am) : id(mui_meridiem_pm);
          set_component_text->execute("home", "meridiem", (time_format_str.find("%p") != std::string::npos) ?
                                                            meridiem_text.c_str() : " ");
          set_component_text->execute("home", "time", id(time_provider).now().strftime(time_format_str).c_str());

  - id: !extend stop_all
    then:
      - lambda: |-
          chip_font->stop();
          custom_buttons_font->stop();
          page_home->stop();
          page_home_boot_progress->stop();

sun:
  id: the_sun
  latitude: 0
  longitude: 0
  on_sunrise:
    then:
      - script.execute: page_home_weather
  on_sunset:
    then:
      - script.execute: page_home_weather

text_sensor:
  - id: nextion_weather
    platform: homeassistant
    entity_id: ${entity_id_weather}
    internal: true
    on_value:
      then:
        - script.execute: page_home_weather
...
